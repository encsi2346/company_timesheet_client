//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AuditLogsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    getAuditLogList(): Promise<AuditLogEntryDto[]> {
        let url_ = this.baseUrl + "/api/AuditLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAuditLogList(_response);
        });
    }

    protected processGetAuditLogList(response: Response): Promise<AuditLogEntryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuditLogEntryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuditLogEntryDto[]>(null as any);
    }
}

export class EmployeesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    createEmployee(body: CreateEmployeeCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateEmployee(_response);
        });
    }

    protected processCreateEmployee(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param onlyManagers (optional) 
     * @return OK
     */
    getEmployeeList(onlyManagers: boolean | undefined): Promise<EmployeeListDto[]> {
        let url_ = this.baseUrl + "/api/Employees?";
        if (onlyManagers === null)
            throw new Error("The parameter 'onlyManagers' cannot be null.");
        else if (onlyManagers !== undefined)
            url_ += "onlyManagers=" + encodeURIComponent("" + onlyManagers) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployeeList(_response);
        });
    }

    protected processGetEmployeeList(response: Response): Promise<EmployeeListDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeListDto[]>(null as any);
    }

    /**
     * @return OK
     */
    employeesGET(id: number): Promise<GetEmployeeDetailsDto> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmployeesGET(_response);
        });
    }

    protected processEmployeesGET(response: Response): Promise<GetEmployeeDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetEmployeeDetailsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetEmployeeDetailsDto>(null as any);
    }

    /**
     * @return OK
     */
    employeesPUT(id: number, body: UpdateEmployeeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmployeesPUT(_response);
        });
    }

    protected processEmployeesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ParticipationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    postCreateParticipation(body: CreateParticipationCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Participation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostCreateParticipation(_response);
        });
    }

    protected processPostCreateParticipation(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @return OK
     */
    employeeAll(id: number): Promise<ParticipationDto[]> {
        let url_ = this.baseUrl + "/api/Participation/employee/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmployeeAll(_response);
        });
    }

    protected processEmployeeAll(response: Response): Promise<ParticipationDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ParticipationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParticipationDto[]>(null as any);
    }

    /**
     * @return OK
     */
    project(id: number): Promise<ParticipationDto[]> {
        let url_ = this.baseUrl + "/api/Participation/project/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProject(_response);
        });
    }

    protected processProject(response: Response): Promise<ParticipationDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ParticipationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParticipationDto[]>(null as any);
    }

    /**
     * @return OK
     */
    participationPUT(id: number, body: UpdateParticipationCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Participation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParticipationPUT(_response);
        });
    }

    protected processParticipationPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    participationDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Participation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParticipationDELETE(_response);
        });
    }

    protected processParticipationDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ProjectsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    createProject(body: CreateProjectCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Projects";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateProject(_response);
        });
    }

    protected processCreateProject(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @return OK
     */
    getProjectsList(): Promise<ProjectListDtoWithId[]> {
        let url_ = this.baseUrl + "/api/Projects";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProjectsList(_response);
        });
    }

    protected processGetProjectsList(response: Response): Promise<ProjectListDtoWithId[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectListDtoWithId.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProjectListDtoWithId[]>(null as any);
    }

    /**
     * @return OK
     */
    getMyProjects(): Promise<ProjectTitlesDto[]> {
        let url_ = this.baseUrl + "/api/Projects/mine";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyProjects(_response);
        });
    }

    protected processGetMyProjects(response: Response): Promise<ProjectTitlesDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectTitlesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProjectTitlesDto[]>(null as any);
    }

    /**
     * @return OK
     */
    getProject(id: number): Promise<ProjectDetailsExtendedDto> {
        let url_ = this.baseUrl + "/api/Projects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProject(_response);
        });
    }

    protected processGetProject(response: Response): Promise<ProjectDetailsExtendedDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectDetailsExtendedDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProjectDetailsExtendedDto>(null as any);
    }

    /**
     * @return OK
     */
    updateProject(id: number, body: UpdateProjectCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Projects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateProject(_response);
        });
    }

    protected processUpdateProject(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TimeEntriesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param employeeId (optional) 
     * @param projectId (optional) 
     * @param start (optional) 
     * @param end (optional) 
     * @return OK
     */
    getListTimeEntries(employeeId: number | undefined, projectId: number | undefined, start: Date | undefined, end: Date | undefined): Promise<TimeEntryDto[]> {
        let url_ = this.baseUrl + "/api/TimeEntries?";
        if (employeeId === null)
            throw new Error("The parameter 'employeeId' cannot be null.");
        else if (employeeId !== undefined)
            url_ += "employeeId=" + encodeURIComponent("" + employeeId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent(start ? "" + start.toISOString() : "") + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent(end ? "" + end.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListTimeEntries(_response);
        });
    }

    protected processGetListTimeEntries(response: Response): Promise<TimeEntryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimeEntryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeEntryDto[]>(null as any);
    }

    /**
     * @return OK
     */
    timeEntries(body: CreateTimeEntryCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TimeEntries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTimeEntries(_response);
        });
    }

    protected processTimeEntries(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param start (optional) 
     * @param end (optional) 
     * @return OK
     */
    mine(start: Date | undefined, end: Date | undefined): Promise<TimeEntryDto[]> {
        let url_ = this.baseUrl + "/api/TimeEntries/mine?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent(start ? "" + formatDate(start) : "") + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent(end ? "" + formatDate(end) : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMine(_response);
        });
    }

    protected processMine(response: Response): Promise<TimeEntryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimeEntryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeEntryDto[]>(null as any);
    }

    /**
     * @return OK
     */
    summary(): Promise<HoursWorkedSummaryDto> {
        let url_ = this.baseUrl + "/api/TimeEntries/summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSummary(_response);
        });
    }

    protected processSummary(response: Response): Promise<HoursWorkedSummaryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HoursWorkedSummaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HoursWorkedSummaryDto>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    register(body: RegisterRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param useCookies (optional) 
     * @param useSessionCookies (optional) 
     * @return OK
     */
    login(useCookies: boolean | undefined, useSessionCookies: boolean | undefined, body: LoginRequest): Promise<AccessTokenResponse> {
        let url_ = this.baseUrl + "/api/Users/login?";
        if (useCookies === null)
            throw new Error("The parameter 'useCookies' cannot be null.");
        else if (useCookies !== undefined)
            url_ += "useCookies=" + encodeURIComponent("" + useCookies) + "&";
        if (useSessionCookies === null)
            throw new Error("The parameter 'useSessionCookies' cannot be null.");
        else if (useSessionCookies !== undefined)
            url_ += "useSessionCookies=" + encodeURIComponent("" + useSessionCookies) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<AccessTokenResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccessTokenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AccessTokenResponse>(null as any);
    }

    /**
     * @return OK
     */
    refresh(body: RefreshRequest): Promise<AccessTokenResponse> {
        let url_ = this.baseUrl + "/api/Users/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: Response): Promise<AccessTokenResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccessTokenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AccessTokenResponse>(null as any);
    }

    /**
     * @param changedEmail (optional) 
     * @return OK
     */
    mapIdentityApi_api_Users_confirmEmail(userId: string, code: string, changedEmail: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/confirmEmail?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
        else
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (changedEmail === null)
            throw new Error("The parameter 'changedEmail' cannot be null.");
        else if (changedEmail !== undefined)
            url_ += "changedEmail=" + encodeURIComponent("" + changedEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMapIdentityApi_api_Users_confirmEmail(_response);
        });
    }

    protected processMapIdentityApi_api_Users_confirmEmail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    resendConfirmationEmail(body: ResendConfirmationEmailRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/resendConfirmationEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResendConfirmationEmail(_response);
        });
    }

    protected processResendConfirmationEmail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    forgotPassword(body: ForgotPasswordRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/forgotPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForgotPassword(_response);
        });
    }

    protected processForgotPassword(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    resetPassword(body: ResetPasswordRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    infoGET(): Promise<InfoResponse> {
        let url_ = this.baseUrl + "/api/Users/manage/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfoGET(_response);
        });
    }

    protected processInfoGET(response: Response): Promise<InfoResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfoResponse>(null as any);
    }

    /**
     * @return OK
     */
    infoPOST(body: InfoRequest): Promise<InfoResponse> {
        let url_ = this.baseUrl + "/api/Users/manage/info";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfoPOST(_response);
        });
    }

    protected processInfoPOST(response: Response): Promise<InfoResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Not Found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfoResponse>(null as any);
    }
}

export class WorkMonthsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return OK
     */
    getListWorkMonths(): Promise<WorkMonthDto[]> {
        let url_ = this.baseUrl + "/api/WorkMonths";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListWorkMonths(_response);
        });
    }

    protected processGetListWorkMonths(response: Response): Promise<WorkMonthDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkMonthDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkMonthDto[]>(null as any);
    }

    /**
     * @return OK
     */
    workMonths(id: number): Promise<WorkMonthDetailsDto> {
        let url_ = this.baseUrl + "/api/WorkMonths/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkMonths(_response);
        });
    }

    protected processWorkMonths(response: Response): Promise<WorkMonthDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkMonthDetailsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkMonthDetailsDto>(null as any);
    }

    /**
     * @return OK
     */
    employee(employeeWorkMonthId: number, body: CloseOrReopenWorkMonthCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/WorkMonths/employee/{employeeWorkMonthId}";
        if (employeeWorkMonthId === undefined || employeeWorkMonthId === null)
            throw new Error("The parameter 'employeeWorkMonthId' must be defined.");
        url_ = url_.replace("{employeeWorkMonthId}", encodeURIComponent("" + employeeWorkMonthId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEmployee(_response);
        });
    }

    protected processEmployee(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AccessTokenResponse implements IAccessTokenResponse {
    readonly tokenType?: string | undefined;
    accessToken?: string | undefined;
    expiresIn?: number;
    refreshToken?: string | undefined;

    constructor(data?: IAccessTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).tokenType = _data["tokenType"];
            this.accessToken = _data["accessToken"];
            this.expiresIn = _data["expiresIn"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): AccessTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccessTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenType"] = this.tokenType;
        data["accessToken"] = this.accessToken;
        data["expiresIn"] = this.expiresIn;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IAccessTokenResponse {
    tokenType?: string | undefined;
    accessToken?: string | undefined;
    expiresIn?: number;
    refreshToken?: string | undefined;
}

export class AuditLogEntryDto implements IAuditLogEntryDto {
    id?: number;
    userName?: string | undefined;
    projectName?: string | undefined;
    description?: string | undefined;
    timestamp?: Date;

    constructor(data?: IAuditLogEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.projectName = _data["projectName"];
            this.description = _data["description"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuditLogEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["projectName"] = this.projectName;
        data["description"] = this.description;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAuditLogEntryDto {
    id?: number;
    userName?: string | undefined;
    projectName?: string | undefined;
    description?: string | undefined;
    timestamp?: Date;
}

export class CloseOrReopenWorkMonthCommand implements ICloseOrReopenWorkMonthCommand {
    id?: number;
    isClosed?: boolean;

    constructor(data?: ICloseOrReopenWorkMonthCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isClosed = _data["isClosed"];
        }
    }

    static fromJS(data: any): CloseOrReopenWorkMonthCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CloseOrReopenWorkMonthCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isClosed"] = this.isClosed;
        return data;
    }
}

export interface ICloseOrReopenWorkMonthCommand {
    id?: number;
    isClosed?: boolean;
}

export class CreateEmployeeCommand implements ICreateEmployeeCommand {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;

    constructor(data?: ICreateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.privilegeLevel = _data["privilegeLevel"];
            this.givenName = _data["givenName"];
            this.familyName = _data["familyName"];
            this.birthPlace = _data["birthPlace"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.terminationDate = _data["terminationDate"] ? new Date(_data["terminationDate"].toString()) : <any>undefined;
            this.jobTitle = _data["jobTitle"];
            this.hourlyWage = _data["hourlyWage"];
            this.contractType = _data["contractType"];
            this.expectedMonthlyHours = _data["expectedMonthlyHours"];
        }
    }

    static fromJS(data: any): CreateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privilegeLevel"] = this.privilegeLevel;
        data["givenName"] = this.givenName;
        data["familyName"] = this.familyName;
        data["birthPlace"] = this.birthPlace;
        data["birthDate"] = this.birthDate ? formatDate(this.birthDate) : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["hireDate"] = this.hireDate ? formatDate(this.hireDate) : <any>undefined;
        data["terminationDate"] = this.terminationDate ? formatDate(this.terminationDate) : <any>undefined;
        data["jobTitle"] = this.jobTitle;
        data["hourlyWage"] = this.hourlyWage;
        data["contractType"] = this.contractType;
        data["expectedMonthlyHours"] = this.expectedMonthlyHours;
        return data;
    }
}

export interface ICreateEmployeeCommand {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;
}

export class CreateParticipationCommand implements ICreateParticipationCommand {
    projectId?: number;
    employeeId?: number;
    role?: string | undefined;
    hourlyRate?: number;

    constructor(data?: ICreateParticipationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projectId = _data["projectId"];
            this.employeeId = _data["employeeId"];
            this.role = _data["role"];
            this.hourlyRate = _data["hourlyRate"];
        }
    }

    static fromJS(data: any): CreateParticipationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateParticipationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["employeeId"] = this.employeeId;
        data["role"] = this.role;
        data["hourlyRate"] = this.hourlyRate;
        return data;
    }
}

export interface ICreateParticipationCommand {
    projectId?: number;
    employeeId?: number;
    role?: string | undefined;
    hourlyRate?: number;
}

export class CreateProjectCommand implements ICreateProjectCommand {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;

    constructor(data?: ICreateProjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.partner = _data["partner"];
            this.projectStatus = _data["projectStatus"];
            this.projectType = _data["projectType"];
            this.projectManagerGivenName = _data["projectManagerGivenName"];
            this.projectManagerFamilyName = _data["projectManagerFamilyName"];
            this.estimatedStartDate = _data["estimatedStartDate"] ? new Date(_data["estimatedStartDate"].toString()) : <any>undefined;
            this.estimatedEndDate = _data["estimatedEndDate"] ? new Date(_data["estimatedEndDate"].toString()) : <any>undefined;
            this.estimatedHours = _data["estimatedHours"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.estimatedGrossEarnings = _data["estimatedGrossEarnings"];
            this.estimatedGrossExpenditure = _data["estimatedGrossExpenditure"];
            this.requireDescriptionForTimeEntry = _data["requireDescriptionForTimeEntry"];
            this.projectManagerId = _data["projectManagerId"];
        }
    }

    static fromJS(data: any): CreateProjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["partner"] = this.partner;
        data["projectStatus"] = this.projectStatus;
        data["projectType"] = this.projectType;
        data["projectManagerGivenName"] = this.projectManagerGivenName;
        data["projectManagerFamilyName"] = this.projectManagerFamilyName;
        data["estimatedStartDate"] = this.estimatedStartDate ? formatDate(this.estimatedStartDate) : <any>undefined;
        data["estimatedEndDate"] = this.estimatedEndDate ? formatDate(this.estimatedEndDate) : <any>undefined;
        data["estimatedHours"] = this.estimatedHours;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["estimatedGrossEarnings"] = this.estimatedGrossEarnings;
        data["estimatedGrossExpenditure"] = this.estimatedGrossExpenditure;
        data["requireDescriptionForTimeEntry"] = this.requireDescriptionForTimeEntry;
        data["projectManagerId"] = this.projectManagerId;
        return data;
    }
}

export interface ICreateProjectCommand {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;
}

export class CreateTimeEntryCommand implements ICreateTimeEntryCommand {
    projectId?: number;
    description?: string | undefined;
    date?: Date;
    hours?: number;

    constructor(data?: ICreateTimeEntryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.projectId = _data["projectId"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.hours = _data["hours"];
        }
    }

    static fromJS(data: any): CreateTimeEntryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTimeEntryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["description"] = this.description;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["hours"] = this.hours;
        return data;
    }
}

export interface ICreateTimeEntryCommand {
    projectId?: number;
    description?: string | undefined;
    date?: Date;
    hours?: number;
}

export enum EmployeeContractType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class EmployeeListDto implements IEmployeeListDto {
    id?: number;
    givenName?: string | undefined;
    familyName?: string | undefined;
    jobTitle?: string | undefined;

    constructor(data?: IEmployeeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.givenName = _data["givenName"];
            this.familyName = _data["familyName"];
            this.jobTitle = _data["jobTitle"];
        }
    }

    static fromJS(data: any): EmployeeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["givenName"] = this.givenName;
        data["familyName"] = this.familyName;
        data["jobTitle"] = this.jobTitle;
        return data;
    }
}

export interface IEmployeeListDto {
    id?: number;
    givenName?: string | undefined;
    familyName?: string | undefined;
    jobTitle?: string | undefined;
}

export enum EmployeePriviligeLevel {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class EmployeeWorkMonthDto implements IEmployeeWorkMonthDto {
    id?: number;
    employeeName?: string | undefined;
    hoursWorked?: number;
    hoursExpected?: number | undefined;
    holidayTime?: number;
    isClosed?: boolean;
    closingTime?: Date | undefined;

    constructor(data?: IEmployeeWorkMonthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employeeName = _data["employeeName"];
            this.hoursWorked = _data["hoursWorked"];
            this.hoursExpected = _data["hoursExpected"];
            this.holidayTime = _data["holidayTime"];
            this.isClosed = _data["isClosed"];
            this.closingTime = _data["closingTime"] ? new Date(_data["closingTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployeeWorkMonthDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeWorkMonthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employeeName"] = this.employeeName;
        data["hoursWorked"] = this.hoursWorked;
        data["hoursExpected"] = this.hoursExpected;
        data["holidayTime"] = this.holidayTime;
        data["isClosed"] = this.isClosed;
        data["closingTime"] = this.closingTime ? this.closingTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEmployeeWorkMonthDto {
    id?: number;
    employeeName?: string | undefined;
    hoursWorked?: number;
    hoursExpected?: number | undefined;
    holidayTime?: number;
    isClosed?: boolean;
    closingTime?: Date | undefined;
}

export class ForgotPasswordRequest implements IForgotPasswordRequest {
    email?: string | undefined;

    constructor(data?: IForgotPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ForgotPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IForgotPasswordRequest {
    email?: string | undefined;
}

export class GetEmployeeDetailsDto implements IGetEmployeeDetailsDto {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;
    id?: number;

    constructor(data?: IGetEmployeeDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.privilegeLevel = _data["privilegeLevel"];
            this.givenName = _data["givenName"];
            this.familyName = _data["familyName"];
            this.birthPlace = _data["birthPlace"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.terminationDate = _data["terminationDate"] ? new Date(_data["terminationDate"].toString()) : <any>undefined;
            this.jobTitle = _data["jobTitle"];
            this.hourlyWage = _data["hourlyWage"];
            this.contractType = _data["contractType"];
            this.expectedMonthlyHours = _data["expectedMonthlyHours"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GetEmployeeDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privilegeLevel"] = this.privilegeLevel;
        data["givenName"] = this.givenName;
        data["familyName"] = this.familyName;
        data["birthPlace"] = this.birthPlace;
        data["birthDate"] = this.birthDate ? formatDate(this.birthDate) : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["hireDate"] = this.hireDate ? formatDate(this.hireDate) : <any>undefined;
        data["terminationDate"] = this.terminationDate ? formatDate(this.terminationDate) : <any>undefined;
        data["jobTitle"] = this.jobTitle;
        data["hourlyWage"] = this.hourlyWage;
        data["contractType"] = this.contractType;
        data["expectedMonthlyHours"] = this.expectedMonthlyHours;
        data["id"] = this.id;
        return data;
    }
}

export interface IGetEmployeeDetailsDto {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;
    id?: number;
}

export class HoursWorkedSummaryDto implements IHoursWorkedSummaryDto {
    hoursWorkedInYear?: number;
    hoursWorkedInMonth?: number;
    hoursWorkedInWeek?: number;
    expectedHoursInMonth?: number;
    expectedHoursInWeek?: number;

    constructor(data?: IHoursWorkedSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hoursWorkedInYear = _data["hoursWorkedInYear"];
            this.hoursWorkedInMonth = _data["hoursWorkedInMonth"];
            this.hoursWorkedInWeek = _data["hoursWorkedInWeek"];
            this.expectedHoursInMonth = _data["expectedHoursInMonth"];
            this.expectedHoursInWeek = _data["expectedHoursInWeek"];
        }
    }

    static fromJS(data: any): HoursWorkedSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new HoursWorkedSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hoursWorkedInYear"] = this.hoursWorkedInYear;
        data["hoursWorkedInMonth"] = this.hoursWorkedInMonth;
        data["hoursWorkedInWeek"] = this.hoursWorkedInWeek;
        data["expectedHoursInMonth"] = this.expectedHoursInMonth;
        data["expectedHoursInWeek"] = this.expectedHoursInWeek;
        return data;
    }
}

export interface IHoursWorkedSummaryDto {
    hoursWorkedInYear?: number;
    hoursWorkedInMonth?: number;
    hoursWorkedInWeek?: number;
    expectedHoursInMonth?: number;
    expectedHoursInWeek?: number;
}

export class HttpValidationProblemDetails implements IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;

    [key: string]: any;
}

export class InfoRequest implements IInfoRequest {
    newEmail?: string | undefined;
    newPassword?: string | undefined;
    oldPassword?: string | undefined;

    constructor(data?: IInfoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newEmail = _data["newEmail"];
            this.newPassword = _data["newPassword"];
            this.oldPassword = _data["oldPassword"];
        }
    }

    static fromJS(data: any): InfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new InfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newEmail"] = this.newEmail;
        data["newPassword"] = this.newPassword;
        data["oldPassword"] = this.oldPassword;
        return data;
    }
}

export interface IInfoRequest {
    newEmail?: string | undefined;
    newPassword?: string | undefined;
    oldPassword?: string | undefined;
}

export class InfoResponse implements IInfoResponse {
    email?: string | undefined;
    isEmailConfirmed?: boolean;

    constructor(data?: IInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.isEmailConfirmed = _data["isEmailConfirmed"];
        }
    }

    static fromJS(data: any): InfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        return data;
    }
}

export interface IInfoResponse {
    email?: string | undefined;
    isEmailConfirmed?: boolean;
}

export class LoginRequest implements ILoginRequest {
    email?: string | undefined;
    password?: string | undefined;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.twoFactorCode = _data["twoFactorCode"];
            this.twoFactorRecoveryCode = _data["twoFactorRecoveryCode"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["twoFactorCode"] = this.twoFactorCode;
        data["twoFactorRecoveryCode"] = this.twoFactorRecoveryCode;
        return data;
    }
}

export interface ILoginRequest {
    email?: string | undefined;
    password?: string | undefined;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;
}

export class ParticipationDto implements IParticipationDto {
    id?: number;
    projectTitle?: string | undefined;
    projectId?: number;
    employeeGivenName?: string | undefined;
    employeeFamilyName?: string | undefined;
    employeeId?: number;
    role?: string | undefined;
    hourlyRate?: number;

    constructor(data?: IParticipationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectTitle = _data["projectTitle"];
            this.projectId = _data["projectId"];
            this.employeeGivenName = _data["employeeGivenName"];
            this.employeeFamilyName = _data["employeeFamilyName"];
            this.employeeId = _data["employeeId"];
            this.role = _data["role"];
            this.hourlyRate = _data["hourlyRate"];
        }
    }

    static fromJS(data: any): ParticipationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectTitle"] = this.projectTitle;
        data["projectId"] = this.projectId;
        data["employeeGivenName"] = this.employeeGivenName;
        data["employeeFamilyName"] = this.employeeFamilyName;
        data["employeeId"] = this.employeeId;
        data["role"] = this.role;
        data["hourlyRate"] = this.hourlyRate;
        return data;
    }
}

export interface IParticipationDto {
    id?: number;
    projectTitle?: string | undefined;
    projectId?: number;
    employeeGivenName?: string | undefined;
    employeeFamilyName?: string | undefined;
    employeeId?: number;
    role?: string | undefined;
    hourlyRate?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ProjectDetailsExtendedDto implements IProjectDetailsExtendedDto {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;
    realHours?: number;
    realGrossEarnings?: number;
    realGrossExpenditure?: number;

    constructor(data?: IProjectDetailsExtendedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.partner = _data["partner"];
            this.projectStatus = _data["projectStatus"];
            this.projectType = _data["projectType"];
            this.projectManagerGivenName = _data["projectManagerGivenName"];
            this.projectManagerFamilyName = _data["projectManagerFamilyName"];
            this.estimatedStartDate = _data["estimatedStartDate"] ? new Date(_data["estimatedStartDate"].toString()) : <any>undefined;
            this.estimatedEndDate = _data["estimatedEndDate"] ? new Date(_data["estimatedEndDate"].toString()) : <any>undefined;
            this.estimatedHours = _data["estimatedHours"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.estimatedGrossEarnings = _data["estimatedGrossEarnings"];
            this.estimatedGrossExpenditure = _data["estimatedGrossExpenditure"];
            this.requireDescriptionForTimeEntry = _data["requireDescriptionForTimeEntry"];
            this.projectManagerId = _data["projectManagerId"];
            this.realHours = _data["realHours"];
            this.realGrossEarnings = _data["realGrossEarnings"];
            this.realGrossExpenditure = _data["realGrossExpenditure"];
        }
    }

    static fromJS(data: any): ProjectDetailsExtendedDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectDetailsExtendedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["partner"] = this.partner;
        data["projectStatus"] = this.projectStatus;
        data["projectType"] = this.projectType;
        data["projectManagerGivenName"] = this.projectManagerGivenName;
        data["projectManagerFamilyName"] = this.projectManagerFamilyName;
        data["estimatedStartDate"] = this.estimatedStartDate ? formatDate(this.estimatedStartDate) : <any>undefined;
        data["estimatedEndDate"] = this.estimatedEndDate ? formatDate(this.estimatedEndDate) : <any>undefined;
        data["estimatedHours"] = this.estimatedHours;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["estimatedGrossEarnings"] = this.estimatedGrossEarnings;
        data["estimatedGrossExpenditure"] = this.estimatedGrossExpenditure;
        data["requireDescriptionForTimeEntry"] = this.requireDescriptionForTimeEntry;
        data["projectManagerId"] = this.projectManagerId;
        data["realHours"] = this.realHours;
        data["realGrossEarnings"] = this.realGrossEarnings;
        data["realGrossExpenditure"] = this.realGrossExpenditure;
        return data;
    }
}

export interface IProjectDetailsExtendedDto {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;
    realHours?: number;
    realGrossEarnings?: number;
    realGrossExpenditure?: number;
}

export class ProjectListDtoWithId implements IProjectListDtoWithId {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    id?: number;

    constructor(data?: IProjectListDtoWithId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.partner = _data["partner"];
            this.projectStatus = _data["projectStatus"];
            this.projectType = _data["projectType"];
            this.projectManagerGivenName = _data["projectManagerGivenName"];
            this.projectManagerFamilyName = _data["projectManagerFamilyName"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProjectListDtoWithId {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectListDtoWithId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["partner"] = this.partner;
        data["projectStatus"] = this.projectStatus;
        data["projectType"] = this.projectType;
        data["projectManagerGivenName"] = this.projectManagerGivenName;
        data["projectManagerFamilyName"] = this.projectManagerFamilyName;
        data["id"] = this.id;
        return data;
    }
}

export interface IProjectListDtoWithId {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    id?: number;
}

export enum ProjectStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class ProjectTitlesDto implements IProjectTitlesDto {
    id?: number;
    title?: string | undefined;

    constructor(data?: IProjectTitlesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): ProjectTitlesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectTitlesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IProjectTitlesDto {
    id?: number;
    title?: string | undefined;
}

export enum ProjectType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class RefreshRequest implements IRefreshRequest {
    refreshToken?: string | undefined;

    constructor(data?: IRefreshRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IRefreshRequest {
    refreshToken?: string | undefined;
}

export class RegisterRequest implements IRegisterRequest {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterRequest {
    email?: string | undefined;
    password?: string | undefined;
}

export class ResendConfirmationEmailRequest implements IResendConfirmationEmailRequest {
    email?: string | undefined;

    constructor(data?: IResendConfirmationEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ResendConfirmationEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResendConfirmationEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IResendConfirmationEmailRequest {
    email?: string | undefined;
}

export class ResetPasswordRequest implements IResetPasswordRequest {
    email?: string | undefined;
    resetCode?: string | undefined;
    newPassword?: string | undefined;

    constructor(data?: IResetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.resetCode = _data["resetCode"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["resetCode"] = this.resetCode;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IResetPasswordRequest {
    email?: string | undefined;
    resetCode?: string | undefined;
    newPassword?: string | undefined;
}

export class TimeEntryDto implements ITimeEntryDto {
    id?: number;
    projectTitle?: string | undefined;
    projectId?: number;
    description?: string | undefined;
    date?: Date;
    hours?: number;
    employeeId?: number;
    employeeName?: string | undefined;

    constructor(data?: ITimeEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectTitle = _data["projectTitle"];
            this.projectId = _data["projectId"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.hours = _data["hours"];
            this.employeeId = _data["employeeId"];
            this.employeeName = _data["employeeName"];
        }
    }

    static fromJS(data: any): TimeEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimeEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectTitle"] = this.projectTitle;
        data["projectId"] = this.projectId;
        data["description"] = this.description;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["hours"] = this.hours;
        data["employeeId"] = this.employeeId;
        data["employeeName"] = this.employeeName;
        return data;
    }
}

export interface ITimeEntryDto {
    id?: number;
    projectTitle?: string | undefined;
    projectId?: number;
    description?: string | undefined;
    date?: Date;
    hours?: number;
    employeeId?: number;
    employeeName?: string | undefined;
}

export class UpdateEmployeeCommand implements IUpdateEmployeeCommand {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;
    id?: number;

    constructor(data?: IUpdateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.privilegeLevel = _data["privilegeLevel"];
            this.givenName = _data["givenName"];
            this.familyName = _data["familyName"];
            this.birthPlace = _data["birthPlace"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.terminationDate = _data["terminationDate"] ? new Date(_data["terminationDate"].toString()) : <any>undefined;
            this.jobTitle = _data["jobTitle"];
            this.hourlyWage = _data["hourlyWage"];
            this.contractType = _data["contractType"];
            this.expectedMonthlyHours = _data["expectedMonthlyHours"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privilegeLevel"] = this.privilegeLevel;
        data["givenName"] = this.givenName;
        data["familyName"] = this.familyName;
        data["birthPlace"] = this.birthPlace;
        data["birthDate"] = this.birthDate ? formatDate(this.birthDate) : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["hireDate"] = this.hireDate ? formatDate(this.hireDate) : <any>undefined;
        data["terminationDate"] = this.terminationDate ? formatDate(this.terminationDate) : <any>undefined;
        data["jobTitle"] = this.jobTitle;
        data["hourlyWage"] = this.hourlyWage;
        data["contractType"] = this.contractType;
        data["expectedMonthlyHours"] = this.expectedMonthlyHours;
        data["id"] = this.id;
        return data;
    }
}

export interface IUpdateEmployeeCommand {
    privilegeLevel?: EmployeePriviligeLevel;
    givenName?: string | undefined;
    familyName?: string | undefined;
    birthPlace?: string | undefined;
    birthDate?: Date;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    hireDate?: Date;
    terminationDate?: Date | undefined;
    jobTitle?: string | undefined;
    hourlyWage?: number;
    contractType?: EmployeeContractType;
    expectedMonthlyHours?: number | undefined;
    id?: number;
}

export class UpdateParticipationCommand implements IUpdateParticipationCommand {
    id?: number;
    role?: string | undefined;
    hourlyRate?: number;

    constructor(data?: IUpdateParticipationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.role = _data["role"];
            this.hourlyRate = _data["hourlyRate"];
        }
    }

    static fromJS(data: any): UpdateParticipationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateParticipationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["role"] = this.role;
        data["hourlyRate"] = this.hourlyRate;
        return data;
    }
}

export interface IUpdateParticipationCommand {
    id?: number;
    role?: string | undefined;
    hourlyRate?: number;
}

export class UpdateProjectCommand implements IUpdateProjectCommand {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;
    id?: number;

    constructor(data?: IUpdateProjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.partner = _data["partner"];
            this.projectStatus = _data["projectStatus"];
            this.projectType = _data["projectType"];
            this.projectManagerGivenName = _data["projectManagerGivenName"];
            this.projectManagerFamilyName = _data["projectManagerFamilyName"];
            this.estimatedStartDate = _data["estimatedStartDate"] ? new Date(_data["estimatedStartDate"].toString()) : <any>undefined;
            this.estimatedEndDate = _data["estimatedEndDate"] ? new Date(_data["estimatedEndDate"].toString()) : <any>undefined;
            this.estimatedHours = _data["estimatedHours"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.estimatedGrossEarnings = _data["estimatedGrossEarnings"];
            this.estimatedGrossExpenditure = _data["estimatedGrossExpenditure"];
            this.requireDescriptionForTimeEntry = _data["requireDescriptionForTimeEntry"];
            this.projectManagerId = _data["projectManagerId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateProjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["partner"] = this.partner;
        data["projectStatus"] = this.projectStatus;
        data["projectType"] = this.projectType;
        data["projectManagerGivenName"] = this.projectManagerGivenName;
        data["projectManagerFamilyName"] = this.projectManagerFamilyName;
        data["estimatedStartDate"] = this.estimatedStartDate ? formatDate(this.estimatedStartDate) : <any>undefined;
        data["estimatedEndDate"] = this.estimatedEndDate ? formatDate(this.estimatedEndDate) : <any>undefined;
        data["estimatedHours"] = this.estimatedHours;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["estimatedGrossEarnings"] = this.estimatedGrossEarnings;
        data["estimatedGrossExpenditure"] = this.estimatedGrossExpenditure;
        data["requireDescriptionForTimeEntry"] = this.requireDescriptionForTimeEntry;
        data["projectManagerId"] = this.projectManagerId;
        data["id"] = this.id;
        return data;
    }
}

export interface IUpdateProjectCommand {
    title?: string | undefined;
    partner?: string | undefined;
    projectStatus?: ProjectStatus;
    projectType?: ProjectType;
    projectManagerGivenName?: string | undefined;
    projectManagerFamilyName?: string | undefined;
    estimatedStartDate?: Date | undefined;
    estimatedEndDate?: Date | undefined;
    estimatedHours?: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    estimatedGrossEarnings?: number;
    estimatedGrossExpenditure?: number;
    requireDescriptionForTimeEntry?: boolean;
    projectManagerId?: number | undefined;
    id?: number;
}

export class WorkMonthDetailsDto implements IWorkMonthDetailsDto {
    id?: number;
    start?: Date;
    end?: Date;
    employeeWorkMonths?: EmployeeWorkMonthDto[] | undefined;

    constructor(data?: IWorkMonthDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
            if (Array.isArray(_data["employeeWorkMonths"])) {
                this.employeeWorkMonths = [] as any;
                for (let item of _data["employeeWorkMonths"])
                    this.employeeWorkMonths!.push(EmployeeWorkMonthDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkMonthDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkMonthDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["start"] = this.start ? formatDate(this.start) : <any>undefined;
        data["end"] = this.end ? formatDate(this.end) : <any>undefined;
        if (Array.isArray(this.employeeWorkMonths)) {
            data["employeeWorkMonths"] = [];
            for (let item of this.employeeWorkMonths)
                data["employeeWorkMonths"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWorkMonthDetailsDto {
    id?: number;
    start?: Date;
    end?: Date;
    employeeWorkMonths?: EmployeeWorkMonthDto[] | undefined;
}

export class WorkMonthDto implements IWorkMonthDto {
    id?: number;
    start?: Date;
    end?: Date;

    constructor(data?: IWorkMonthDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkMonthDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkMonthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["start"] = this.start ? formatDate(this.start) : <any>undefined;
        data["end"] = this.end ? formatDate(this.end) : <any>undefined;
        return data;
    }
}

export interface IWorkMonthDto {
    id?: number;
    start?: Date;
    end?: Date;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}